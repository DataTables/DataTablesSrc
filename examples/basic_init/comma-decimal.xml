<?xml version="1.0" encoding="UTF-8" ?>
<dt-example table-type="html-comma" order="17">

<css lib="datatables" />
<js lib="jquery" />
<js lib="datatables" />

<title>Language - Comma decimal place</title>
<js><![CDATA[
$('#example').DataTable({
	language: {
		decimal: ',',
		thousands: '.'
	}
});
]]></js>
<js-vanilla>
<![CDATA[
new DataTable('#example', {
	language: {
		decimal: ',',
		thousands: '.'
	}
});
]]>
</js-vanilla>

<info><![CDATA[

A dot (`.`) is used to mark the decimal place in Javascript, however, [many parts of the world use a comma](http://en.wikipedia.org/wiki/Decimal_mark) (`,`) and other characters such as the Unicode decimal separator (<code>&#x2396;</code>) or a dash (`-`) are often used to show the decimal place in a displayed number.

When reading such numbers, Javascript won't automatically recognise them as numbers, however, DataTables' type detection and sorting methods can be instructed through the `dt-init language.decimal` option which character is used as the decimal place in your numbers. This will be used to correctly adjust DataTables' type detection and sorting algorithms to sort numbers in your table.

Any character can be passed in using the `dt-init language.decimal` option, although the decimal place character used in a single table must be consistent (i.e. numbers with a dot decimal place and comma decimal place cannot both appear in the same table). Different tables on the same page can use different decimal characters if required.

The example below shows a comma being used as the decimal place in the currency numbers shown in the final column.

]]></info>

</dt-example>
