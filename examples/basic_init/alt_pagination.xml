<?xml version="1.0" encoding="UTF-8" ?>
<dt-example table-type="html" order="11">

<css lib="datatables" />
<js lib="jquery" />
<js lib="datatables" />

<title>Alternative pagination</title>
<js><![CDATA[
$('#example').DataTable({
	pagingType: 'full_numbers'
});
]]></js>
<js-vanilla>
<![CDATA[
new DataTable('#example', {
	pagingType: 'full_numbers'
});
]]>
</js-vanilla>

<info><![CDATA[

The default page control presented by DataTables (forward and backward buttons with up to 7 page numbers in-between) is fine for most situations, but there are cases where you may wish to customise the options presented to the end user. This is done through DataTables' extensible pagination mechanism, the `dt-init pagingType` option.

There are six built-in options for which pagination controls DataTables should show:

* `string numbers` - Page number buttons only
* `string simple` - 'Previous' and 'Next' buttons only
* `string simple_numbers` - 'Previous' and 'Next' buttons, plus page numbers
* `string full` - 'First', 'Previous', 'Next' and 'Last' buttons
* `string full_numbers` - 'First', 'Previous', 'Next' and 'Last' buttons, plus page numbers
* `string first_last_numbers` - 'First' and 'Last' buttons, plus page numbers

The language strings of 'First', 'Previous' etc can be optionally changed through the internationalisation options of DataTables; `dt-init language.paginate.first`, `dt-init language.paginate.previous` etc.

Additional options for the buttons that are shown can be added through the use of pagination type plug-ins. Furthermore, how the buttons are actually shown can be altered through the use of plug-in pagination renderers.

The example below shows the `string full_numbers` type of pagination.

]]></info>

</dt-example>
