<?xml version="1.0" encoding="UTF-8" ?>
<dt-example table-type="html-split-name" order="4">

<css lib="datatables" />
<js lib="jquery" />
<js lib="datatables" />

<title>Multi-column ordering</title>
<js><![CDATA[
$('#example').DataTable({
	columnDefs: [
		{
			targets: [0],
			orderData: [0, 1]
		},
		{
			targets: [1],
			orderData: [1, 0]
		},
		{
			targets: [4],
			orderData: [4, 0]
		}
	]
});
]]></js>
<js-vanilla>
<![CDATA[
new DataTable('#example', {
	columnDefs: [
		{
			targets: [0],
			orderData: [0, 1]
		},
		{
			targets: [1],
			orderData: [1, 0]
		},
		{
			targets: [4],
			orderData: [4, 0]
		}
	]
});
]]>
</js-vanilla>

<info><![CDATA[

DataTables allows ordering by multiple columns at the same time, which can be activated in a number of different ways:

* User shift click on a column (added the clicked column as a secondary, tertiary etc ordering column).
* On a per-column basis (i.e. order by a specific column and then a secondary column if the data in the first column is identical), through the `dt-init columns.orderData` option.
* Using the `dt-init columns.orderData` option to specify a multiple column order by default (for example `[ 0, 1 ]`).
* Through the `dt-api order()` API method.

Note that, the ability for the user to shift click to order multiple columns can be disabled through the `dt-init orderMulti` option.

The example below shows the first column having a secondary order applied to the second column in the table, vice-versa for the second column being tied directly to the first and the salary column to the first name column.

]]></info>

</dt-example>
