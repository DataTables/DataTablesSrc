<?xml version="1.0" encoding="UTF-8" ?>
<dt-example table-type="html" order="2">

<css lib="datatables">
	tfoot input {
		width: 100%;
		padding: 3px;
		box-sizing: border-box;
	}
</css>
<js lib="jquery" />
<js lib="datatables" />

<title>Individual column searching (text inputs)</title>

<js><![CDATA[
$('#example').DataTable({
	initComplete: function () {
		this.api()
			.columns()
			.every(function () {
				var column = this;
				var title = column.footer().textContent;

				// Create input element and add event listener
				$('<input type="text" placeholder="Search ' + title + '" />')
					.appendTo($(column.footer()).empty())
					.on('keyup change clear', function () {
						if (column.search() !== this.value) {
							column.search(this.value).draw();
						}
					});
			});
	}
});
]]></js>

<js-vanilla><![CDATA[
new DataTable('#example', {
	initComplete: function () {
		this.api()
			.columns()
			.every(function () {
				let column = this;
				let title = column.footer().textContent;

				// Create input element
				let input = document.createElement('input');
				input.placeholder = title;
				column.footer().replaceChildren(input);

				// Event listener for user input
				input.addEventListener('keyup', () => {
					if (column.search() !== this.value) {
						column.search(input.value).draw();
					}
				});
			});
	}
});
]]></js-vanilla>

<info><![CDATA[

The searching functionality provided by DataTables is useful for quickly search through the information in the table - however the search is global, and you may wish to present controls that search on specific columns.

DataTables has the ability to apply searching to a specific column through the `dt-api column().search()` method (note that the name of the method is `search` not `filter`, since `dt-api filter()` is used to apply a filter to a result set).

The column searches are cumulative, so you can apply multiple individual column searches, in addition to the global search, allowing complex searching options to be presented to the user.

This examples shows text elements being used with the `dt-api column().search()` method to add input controls in the footer of the table for each column. Note that the `*index*:visible` option is used for the column selector to ensure that the `dt-api column()` method takes into account any hidden columns when selecting the column to act upon. `-init initComplete` is used to allow for any asynchronous actions, such as Ajax loading of data or language information.

]]></info>

</dt-example>
