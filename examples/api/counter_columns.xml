<?xml version="1.0" encoding="UTF-8" ?>
<dt-example table-type="html-index" order="9">

<css lib="datatables" />
<js lib="jquery" />
<js lib="datatables" />

<title>Index column</title>

<js><![CDATA[
var table = $('#example').DataTable({
	columnDefs: [
		{
			searchable: false,
			orderable: false,
			targets: 0
		}
	],
	order: [[1, 'asc']]
});

table
	.on('order.dt search.dt', function () {
		var i = 1;

		table
			.cells(null, 0, { search: 'applied', order: 'applied' })
			.every(function (cell) {
				this.data(i++);
			});
	})
	.draw();
]]></js>

<js-vanilla><![CDATA[
const table = new DataTable('#example', {
	columnDefs: [
		{
			searchable: false,
			orderable: false,
			targets: 0
		}
	],
	order: [[1, 'asc']]
});

table
	.on('order.dt search.dt', function () {
		let i = 1;

		table
			.cells(null, 0, { search: 'applied', order: 'applied' })
			.every(function (cell) {
				this.data(i++);
			});
	})
	.draw();
]]></js-vanilla>

<info><![CDATA[

Highly-interactive tables often require a 'counter' column that contains the position for each row in the table. This column should not be sortable, and will change dynamically as the ordering and searching applied to the table is altered by the end user.

This example shows how this can be achieved with DataTables, where the first column is the counter column, and is updated when ordering or searching occurs. This is done by listening for the `dt-event order` and `dt-event search` events emitted by the table. When these events are detected the `dt-api cells().every()` method is used to iterate over the cells in the first column with `-api cell().data()` used to  update their contents as needed. Note that the `filter` and `order` options are using in the `dt-api column()` method to get the nodes in the current order and with the currently applied filter.

]]></info>

</dt-example>
