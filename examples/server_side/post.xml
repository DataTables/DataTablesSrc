<?xml version="1.0" encoding="UTF-8" ?>
<dt-example table-type="ssp" order="3">

<css lib="datatables" />
<js lib="jquery" />
<js lib="datatables" />

<title>POST data</title>
<js><![CDATA[

$(document).ready(function() {
	$('#example').dataTable( {
		"processing": true,
		"serverSide": true,
		"ajax": {
			"url": "scripts/post.php",
			"type": "POST"
		},
		"columns": [
			{ "data": "first_name" },
			{ "data": "last_name" },
			{ "data": "position" },
			{ "data": "office" },
			{ "data": "start_date" },
			{ "data": "salary" }
		]
	} );
} );
]]></js>

<info><![CDATA[

By default, the Ajax request that DataTables makes to obtain server-side processing data is an HTTP GET request. However, there are times when you might wish to use POST. This is very easily done by using the `type` option of the `dt-init ajax` initialisation option.

When given as an object, the `dt-init ajax` option maps directly onto the [jQuery ajax](http://api.jquery.com/jQuery.ajax/) options (i.e. any option that can be used in jQuery's Ajax function can also be used in DataTable's `dt-init ajax` option).

The example below shows `dt-init ajax` being used with the `type` option set to `string POST` to make a POST request.

]]></info>

</dt-example>
