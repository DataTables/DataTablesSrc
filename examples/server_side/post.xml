<?xml version="1.0" encoding="UTF-8" ?>
<dt-example table-type="ssp" order="3">

<css lib="datatables" />
<js lib="jquery" />
<js lib="datatables" />

<title>POST data</title>
<js><![CDATA[
$('#example').DataTable({
	ajax: {
		url: 'scripts/post.php',
		type: 'POST'
	},
	columns: [
		{ data: 'first_name' },
		{ data: 'last_name' },
		{ data: 'position' },
		{ data: 'office' },
		{ data: 'start_date' },
		{ data: 'salary' }
	],
	processing: true,
	serverSide: true
});

]]></js>
<js-vanilla>
<![CDATA[
new DataTable('#example', {
	ajax: {
		url: 'scripts/post.php',
		type: 'POST'
	},
	columns: [
		{ data: 'first_name' },
		{ data: 'last_name' },
		{ data: 'position' },
		{ data: 'office' },
		{ data: 'start_date' },
		{ data: 'salary' }
	],
	processing: true,
	serverSide: true
});
]]>
</js-vanilla>

<info><![CDATA[

By default, the Ajax request that DataTables makes to obtain server-side processing data is an HTTP GET request. However, there are times when you might wish to use POST. This is very easily done by using the `type` option of the `dt-init ajax` initialisation option.

When given as an object, the `dt-init ajax` option maps directly onto the [jQuery ajax](https://api.jquery.com/jQuery.ajax/) options (i.e. any option that can be used in jQuery's Ajax function can also be used in DataTable's `dt-init ajax` option).

The example below shows `dt-init ajax` being used with the `type` option set to `string POST` to make a POST request.

]]></info>

</dt-example>
