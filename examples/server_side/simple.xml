<?xml version="1.0" encoding="UTF-8" ?>
<dt-example table-type="ssp" order="1">

<css lib="datatables" />
<js lib="jquery" />
<js lib="datatables" />

<title>Server-side processing</title>
<js><![CDATA[
$('#example').DataTable({
	ajax: 'scripts/server_processing.php',
	processing: true,
	serverSide: true
});
]]></js>
<js-vanilla>
<![CDATA[
new DataTable('#example', {
	ajax: 'scripts/server_processing.php',
	processing: true,
	serverSide: true
});
]]>
</js-vanilla>

<info><![CDATA[

There are many ways to get your data into DataTables, and if you are working with seriously large databases, you might want to consider using the server-side options that DataTables provides. With server-side processing enabled, all actions that DataTables performs (such as paging, searching and ordering) are handed off to a server where an SQL engine (or similar) can perform these actions on the large data set (after all, that's what the database engine is designed for!). As such, each draw of the table will result in a new Ajax request to get the required data.

Server-side processing is enabled by setting the `dt-init serverSide` option to `true` and providing an Ajax data source through the `dt-init ajax` option.

This example shows a very simple table, matching the other client-side processing examples, but in this instance using server-side processing.

]]></info>

</dt-example>
