<?xml version="1.0" encoding="UTF-8" ?>
<dt-example table-type="html" order="4">

<css lib="datatables">
table.inputs td {
	padding: 5px;
}
</css>
<js lib="jquery" />
<js lib="datatables" />

<title>Custom filtering - range search</title>
<js><![CDATA[
var minEl = $('#min');
var maxEl = $('#max');

var table = $('#example').DataTable();

// Custom range filtering function
table.search.fixed('range', function (searchStr, data, index) {
	var min = parseInt(minEl.val(), 10);
	var max = parseInt(maxEl.val(), 10);
	var age = parseFloat(data[3]) || 0; // use data for the age column

	if (
		(isNaN(min) && isNaN(max)) ||
		(isNaN(min) && age <= max) ||
		(min <= age && isNaN(max)) ||
		(min <= age && age <= max)
	) {
		return true;
	}

	return false;
});

// Changes to the inputs will trigger a redraw to update the table
minEl.on('input', function () {
	table.draw();
});
maxEl.on('input', function () {
	table.draw();
});

]]></js>
<js-vanilla><![CDATA[
const minEl = document.querySelector('#min');
const maxEl = document.querySelector('#max');

const table = new DataTable('#example');

// Custom range filtering function
table.search.fixed('range', function (searchStr, data, index) {
	var min = parseInt(minEl.value, 10);
	var max = parseInt(maxEl.value, 10);
	var age = parseFloat(data[3]) || 0; // use data for the age column

	if (
		(isNaN(min) && isNaN(max)) ||
		(isNaN(min) && age <= max) ||
		(min <= age && isNaN(max)) ||
		(min <= age && age <= max)
	) {
		return true;
	}

	return false;
});

// Changes to the inputs will trigger a redraw to update the table
minEl.addEventListener('input', function () {
	table.draw();
});
maxEl.addEventListener('input', function () {
	table.draw();
});

]]></js-vanilla>

<info><![CDATA[

There may be occasions when you wish to search data presented to the end user in your own manner, common examples are number range searches (in between two numbers) and date range searches. DataTables provides a number of API methods so you can add your own search functions. In this example we use `-api search.fixed()` to apply a "named" search ot the table. The variables updated by the `-tag input` event listeners are used in the range filter, so we just need to redraw the table (`-api draw()`) when the table should be refiltered

This example shows a search being performed on the age column in the data, based upon two inputs.

]]></info>

<demo-html>
	<table class="inputs">
		<tr>
			<td>Minimum age:</td>
			<td><input type="text" id="min" name="min" /></td>
		</tr>
		<tr>
			<td>Maximum age:</td>
			<td><input type="text" id="max" name="max" /></td>
		</tr>
	</table>
</demo-html>

</dt-example>
