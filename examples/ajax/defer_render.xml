<?xml version="1.0" encoding="UTF-8" ?>
<dt-example table-type="ajax" order="9">

<css lib="datatables" />
<js lib="jquery" />
<js lib="datatables" />

<title>Deferred rendering for speed</title>
<js><![CDATA[
$('#example').DataTable({
	ajax: 'data/arrays.txt',
	deferRender: true
});
]]></js>

<js-vanilla><![CDATA[
new DataTable('#example', {
	ajax: 'data/arrays.txt',
	deferRender: true
});
]]></js-vanilla>

<info><![CDATA[

When working with large data sources, you might seek to improve the speed at which DataTables runs. One method to do this is to make use of the built-in deferred rendering option in DataTables with the `dt-init deferRender` option.

When deferred rendering is enabled, rather than having DataTables create all `tag TR` and `tag TD` nodes required for the table when the data is loaded, DataTables will only create the nodes required for each individual row at the time of that row being drawn on the page (these nodes are then retained in case they are needed again so they aren't created multiple times). This can give a significant performance increase, since a lot less work is done at initialisation time.

The example below shows DataTables with deferred rendering enabled. For this small example you'll likely notice no difference, but larger tables can benefit significantly from simply enabling this parameter.

]]></info>

</dt-example>
