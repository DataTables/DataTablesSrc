<?xml version="1.0" encoding="UTF-8" ?>
<dt-example table-type="ajax" order="6">

<css lib="datatables" />
<js lib="jquery" />
<js lib="datatables" />

<title>Generated content for a column</title>
<js><![CDATA[
var table = $('#example').DataTable({
	ajax: 'data/arrays.txt',
	columnDefs: [
		{
			data: null,
			defaultContent: '<button>Click!</button>',
			targets: -1
		}
	]
});

$('#example tbody').on('click', 'button', function () {
	var data = table.row($(this).parents('tr')).data();

	alert(data[0] + "'s salary is: " + data[5]);
});
]]></js>

<js-vanilla><![CDATA[
var table = new DataTable('#example', {
	ajax: 'data/arrays.txt',
	columnDefs: [
		{
			data: null,
			defaultContent: '<button>Click!</button>',
			targets: -1
		}
	]
});

table.on('click', 'button', function (e) {
	let data = table.row(e.target.closest('tr')).data();

	alert(data[0] + "'s salary is: " + data[5]);
});
]]></js-vanilla>

<info><![CDATA[

In some tables you might wish to have some content generated automatically. This can be done in a number of ways:

* `dt-init columns.render` for content that is dynamic (i.e. based upon the row's data)
* `dt-init columns.defaultContent` for static content (i.e. simple strings)

This examples shows the use of `dt-init columns.defaultContent` to create a _button_ element in the last column of the table. A simple `click` event listener is used to watch for clicks on a button in the row, and when activated uses the `dt-api row().data()` method to get the data for the row and show a bit of information about it in an `alert` box. This is a simple use case, but it can be built up to be arbitrarily complex.

Note also that the `dt-init columns.data` option for the column has been set to `null` to indicate that the column has no information contained in the data source object.

]]></info>

</dt-example>
