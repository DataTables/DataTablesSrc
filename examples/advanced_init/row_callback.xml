<?xml version="1.0" encoding="UTF-8" ?>
<dt-example table-type="html" order="11">

<css lib="datatables">
	td.highlight {
		font-weight: bold;
		color: blue;
	}

	html.dark td.highlight {
		color: white;
	}
</css>
<js lib="jquery" />
<js lib="datatables" />

<title>Row created callback</title>
<js><![CDATA[
$('#example').DataTable({
	createdRow: function (row, data, index) {
		if (data[5].replace(/[\$,]/g, '') * 1 > 150000) {
			$('td', row).eq(5).addClass('highlight');
		}
	}
});
]]></js>
<js-vanilla><![CDATA[
new DataTable('#example', {
	createdRow: (row, data, index) => {
		if (data[5].replace(/[\$,]/g, '') * 1 > 150000) {
			row.querySelector(':nth-child(6)').classList.add('highlight');
		}
	}
});
]]></js-vanilla>

<info><![CDATA[

The following example shows how a callback function can be used to format a particular row at draw time. For each row that is generated for display, the `dt-init createdRow` function is called once and once only. It is passed the create row node which can then be modified.

In this case a trivial example of making the 'salary' column blue and bold by adding a CSS class to the container cell if the salary is greater than $150,000. Note that `dt-init columns.createdCell` could also be used to create exactly the same effect.

]]></info>

</dt-example>
