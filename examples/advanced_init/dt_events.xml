<?xml version="1.0" encoding="UTF-8" ?>
<dt-example table-type="html" order="2">

<css lib="datatables" />
<js lib="jquery" />
<js lib="datatables" />

<title>DataTables events</title>
<js><![CDATA[
function eventFired(type) {
	var n = $('#demo_info')[0];
	n.innerHTML +=
		'<div>' + type + ' event - ' + new Date().getTime() + '</div>';
	n.scrollTop = n.scrollHeight;
}

// Adding events before the DataTable is created
$('#example')
	.on('order.dt', function () {
		eventFired('Order');
	})
	.on('search.dt', function () {
		eventFired('Search');
	})
	.on('page.dt', function () {
		eventFired('Page');
	})
	.DataTable();
]]></js>
<js-vanilla><![CDATA[
function eventFired(type) {
	let n = document.querySelector('#demo_info');
	n.innerHTML +=
		'<div>' + type + ' event - ' + new Date().getTime() + '</div>';
	n.scrollTop = n.scrollHeight;
}

new DataTable('#example')
	.on('order.dt', () => eventFired('Order'))
	.on('search.dt', () => eventFired('Search'))
	.on('page.dt', () => eventFired('Page'));
]]></js-vanilla>

<info><![CDATA[

DataTables fires a number of custom events which you can bind to using the `-api on()` method (or if using jQuery using `$().on()` and the `dt` namespace), allowing your code to perform custom actions when these events occur.

This example shows the use of the `dt-event order`, `dt-event search` and `dt-event page` events by adding a notification that the event fired to an element on the page to show that they have indeed fired.

]]></info>

<demo-html>
	<div id="demo_info" class="box"> </div>
</demo-html>

</dt-example>
