<?xml version="1.0" encoding="UTF-8" ?>
<dt-api group="tables">
	<name>tables()</name>
	<summary>Select tables based on a selector from the API's context</summary>
	<since>1.10</since>

	<type type="function">
		<signature>tables()</signature>
		<description>Select all tables</description>
		<returns type="DataTables.Api">DataTables API instance with all tables in the current context.</returns>
	</type>
	<type type="function">
		<signature>tables( selector )</signature>
		<description>Select tables based on the given selector</description>
		<parameter type="table-selector" name="selector">
			Table selector to select which tables you want to operate on.
		</parameter>
		<returns type="DataTables.Api">DataTables API instance with selected tables in its context.</returns>
	</type>

	<description>
		The DataTables API can operate on multiple tables at a single time - the tables in the "context". As a quick example `new DataTable('.dataTable').search('Fred').draw();` will filter all tables which were found by the class `dataTable`.

		The context of an API instance defines which DataTable tables the API will operate on and this method provides one way to control what tables are in that context.

		This ability to operate on multiple tables can be particularly useful if you have many tables on a single page, but you might also wish to reduce the table's in the API's context to operate on just one, or some other subset of the tables.

		If you are working with single table API instances only, then this method will be of limited use to you! It is really only appropriate when working with multiple tables. Additionally, please note that there is no option that this selector can perform over using jQuery directly on the DOM to select tables. It is mainly provided for convenience and completeness of the API.
	</description>

	<example title="Apply an order to the second and third table in the API's context"><![CDATA[
var tables = new DataTable('.dataTable');

tables
	.tables([1, 2])
	.order([3, 'asc'])
	.draw();
]]></example>

	<example title="Find all tables which have a class `admin` from an API instance and apply a global search to them"><![CDATA[
var tables = new DataTable('.dataTable');

tables
	.tables('.admin')
	.search('Important')
	.draw();

// Note that:
//   $('.dataTable.admin').DataTable().search('Important').draw();
// would also have achieved the same effect
]]></example>

	<related type="api">table()</related>
</dt-api>
