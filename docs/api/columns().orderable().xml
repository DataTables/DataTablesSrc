<?xml version="1.0" encoding="UTF-8" ?>
<dt-api group="columns">
	<name>columns().orderable()</name>
	<summary>Get information about the orderable status of the selected columns.</summary>
	<since>2.0</since>

	<type type="function">
		<signature>columns().order( [ directions ] )</signature>
		<description>Get information about the orderable status of the selected columns (enabled or not and what ordering directions are available).</description>
		<parameter type="boolean" name="directions" default="false">
			Controls the information that is returned - see below for details. Can be not given (undefined), `false` or `true`.
		</parameter>
		<returns type="DataTables.Api">DataTables API instance containing `true` or `false` for each selected column, depending on the orderable state and if `directions` is undefined or false. If the parameter passed in is `true` the method will return information about what ordering directions the columns can take (see `-init columns.orderSequence`).</returns>
	</type>

	<description>
		This method provides the ability to programmatically check if the given columns are orderable by the end user (a click on the header cell) and optionally to get the ordering directions that the column can take, as defined by `-init columns.orderSequence`.
	</description>

	<example title="Check if the first and second columns are orderable by the end user, and if so, order on them"><![CDATA[
var table = new DataTable('#myTable');

if (
	table
		.columns([0, 1])
		.orderable()
		.includes(true)
) {
	table
		.order([
			[0, 'asc'],
			[1, 'desc']
		])
		.draw();
}
]]></example>

	<related type="option">order</related>
	<related type="option">ordering</related>
	<related type="option">columns.orderSequence</related>
	<related type="api">order()</related>
	<related type="api">column().order()</related>
	<related type="api">columns().order()</related>
	<related type="api">column().orderable()</related>
	<related type="api">columns().orderable()</related>
</dt-api>