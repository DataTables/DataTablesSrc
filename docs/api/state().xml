<?xml version="1.0" encoding="UTF-8" ?>
<dt-api group="core">
	<name>state()</name>
	<summary>Get / set the state of the table</summary>
	<since>1.10.1</since>

	<type type="function">
		<signature>state()</signature>
		<description>Get the state of the DataTables</description>
		<returns type="object">State saved object</returns>
	</type>

	<type type="function" since="2.0.0">
		<signature>state( set [, ignoreTime ] )</signature>
		<description>Set the state of the DataTables</description>
		<parameter type="object" name="set">
			A state object that will restore a given state. Note that not all parameters for the state object are required.
		</parameter>
		<parameter type="boolean" name="ignoreTime" default="true">
			Disregard checks for the timestamp for when the state object was created (`true`).
		</parameter>
		<returns type="DataTables.Api">DataTables API instance</returns>
	</type>

	<description>
		The "state" of a DataTable refers to properties that define its current display, such as pagination parameters, ordering and filtering. While you can use individual API methods to get and set properties (e.g. `-api order()`) this method provides a collected API that will give and take information about the table as a whole. Please note also that it __does__ work without `-init stateSave` being enabled.

		The data object has the following format, but please be aware that plug-ins and extensions to DataTables can modify this structure by adding data as they require for their own state information.
		
		```js
		{
			"time":   {number}               // Time stamp of when the object was created
			"start":  {number}               // Display start point
			"length": {number}               // Page length
			"order":  {array}                // 2D array of column ordering information (see `order` option)
			"search": {
				"search":          {string}  // Search term
				"regex":           {boolean} // Indicate if the search term should be treated as regex or not
				"smart":           {boolean} // Flag to enable DataTables smart search
				"caseInsensitive": {boolean} // Case insensitive flag
			},
			"columns" [
				{
					"visible": {boolean}     // Column visibility
					"search":  {}            // Object containing column search information. Same structure as `search` above
				}
			]
		}
		```
		
		If using this method as a setter, you will very likely want to call `-api draw()`, passing in `false` to the method, to ensure that the table is redrawn with the new state (and that the correct paging is shown).
	</description>

	<example title="Get the saved page length from the state object"><![CDATA[

alert( 'Saved page length is: '+ table.state().length );

]]></example>

	<example title="Get the table state, change it and load it back"><![CDATA[

var table = new DataTable('#myTable');
var state = table.state();

state.start = 10;

table
	.state( start )
	.draw( false );

]]></example>

	<related type="api">state.clear()</related>
	<related type="api">state.loaded()</related>
	<related type="api">state.save()</related>
	<related type="option">stateSave</related>
	<related type="option">stateSaveCallback</related>
	<related type="option">stateLoadCallback</related>
	<related type="option">stateLoadParams</related>
	<related type="option">stateSaveParams</related>
	<related type="option">stateLoaded</related>
	<related type="event">stateLoaded</related>
	<related type="event">stateLoadParams</related>
	<related type="event">stateSaveParams</related>
</dt-api>