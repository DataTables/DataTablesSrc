<?xml version="1.0" encoding="UTF-8" ?>
<dt-api group="core">
	<name>column().search.fixed()</name>
	<summary>Get / set a named search to apply to a column.</summary>
	<since>2.0</since>

	<type type="function">
		<signature>column().search.fixed()</signature>
		<description>
			Get a list of the names of searches applied to the column.
		</description>
		<returns type="DataTables.Api">
			An API instance that contains the names of the search terms applied to the column.
		</returns>
	</type>

	<type type="function">
		<signature>column().search.fixed( name )</signature>
		<description>
			Get the search term used for the given name.
		</description>
		<returns type="undefined|function|string|RegExp">
			The search term that was originally applied.
		</returns>
	</type>

	<type type="function">
		<signature>column().search.fixed( name, searchTerm )</signature>
		<description></description>
		<parameter type="string" name="name">
			Treat as a regular expression (`true`) or not (default, `false`).
		</parameter>
		<parameter type="string|RegExp|function|null" name="input">
			The search term to apply to the table.

			Use `null` for this value to delete an existing search term.

			If given as a string, it will be applied to the table's search using DataTables "smart" search (see `-api search()`).

			If working with a regular expression, the data given is the search data for the cells in column in question.
			
			In the case of a function the function is called for each row with three parameters which are passed in; the first is the search data for the cell in the row/column being search, the second is the row's original data object, and the third is the column index. A boolean value should be returned: `true` to keep the row, `false` to filter it out.
		</parameter>
		<returns type="DataTables.Api">DataTables API instance</returns>
	</type>

	<description>
		Just as `-api search.fixed()` applies a "fixed" search term to the whole table, this method can be used to apply a search term to a specific column.

		The fixed search (which might also be termed _sticky_ or _named_ searches) provides a way to easily add cumulative search terms to the table. You can add multiple independent search terms, and DataTables will combine them (AND logic) displaying the result of all search terms that have been applied.

		Please be aware that this method sets the fixed search to apply to the column only - it does not actually perform the search. In order to have the search performed and the result shown, use the `dt-api draw()` method, which can be called simply as a chained method of this method.
	</description>

	<example title="Get an array of current search names"><![CDATA[
let table = new DataTable('#myTable');

let searches = table.column(0).search.fixed().toArray();
]]></example>

	<example title="Get an expecting search term"><![CDATA[
let search = table.column(1).search.fixed('mySearch');
]]></example>

	<example title="Applying a search string"><![CDATA[
table.column('.cities').search.fixed('myString', 'Paris');
]]></example>

	<example title="Applying a search regex"><![CDATA[
table.column(0).search.fixed('myRegex', /l.*n/i);
]]></example>

	<example title="Applying a search function"><![CDATA[
table.column(-1).search.fixed('myFunc', (cell, data) => {
	return cell > 50;
});
]]></example>

	<example title="Deleting an existing search term"><![CDATA[
table.column(0).search.fixed('mySearch', null);
]]></example>

	<related type="option">searching</related>
	<related type="option">columns.searchable</related>
	<related type="api">search()</related>
	<related type="api">search.fixed()</related>
	<related type="api">column().search()</related>
	<related type="api">column().search.fixed()</related>
	<related type="api">columns().search()</related>
	<related type="api">columns().search.fixed()</related>
</dt-api>