<?xml version="1.0" encoding="UTF-8" ?>
<dt-api group="columns">
	<name>column().search()</name>
	<summary>Search for data in the selected column.</summary>
	<since>1.10</since>

	<type type="function">
		<signature>column().search()</signature>
		<description>Get the currently applied column search.</description>
		<returns type="string">Search term that is currently applied to the column. This will be an empty string if no search term is applied.</returns>
	</type>

	<type type="function" since="2.0">
		<signature>column().search( input [, options] )</signature>
		<description>
			Set the search term to use for the selected column, with configuration options. Call `-api draw()` to update the table's view once the search term has been setup.
		</description>
		<parameter type="string|RegExp|function" name="input">
			Search to apply to the column.
			
			As of DataTables 2, this parameter can be given as a regular expression or a function.
			
			If working with a regular expression, the data given is the search data for the cells in column in question.
			
			In the case of a function the function is called for each row with four parameters which are passed in:
			
			1. The search string for the column
			2. The row's original data object
			3. The row's data index
			4. The columns's data index
			
			A boolean value should be returned: `true` to keep the row, `false` to filter it out.

			Note that if a regex or function is provided for this parameter, the following parameters are ignored.
		</parameter>
		<parameter type="DataTables.SearchOptions" name="options">
			Configuration options for how the search will be performed. See `-type DataTables.SearchOptions` for a description of all options. If an option is not given here, the value that it was set to for the previous search will be used.
		</parameter>
		<returns type="DataTables.Api">DataTables API instance</returns>
	</type>

	<type type="function">
		<signature>column().search( input [, regex[ , smart[ , caseInsen ]]] )</signature>
		<description>
			Set the search term for the column from the selector. Note that the signature above is preferred as of DataTables 2, as it provides additional options. This signature is retained for backwards compatibility.
		</description>
		<parameter type="string|RegExp|function" name="input">
			The search term to apply. See the `input` parameter in the signature description above for details.
		</parameter>
		<parameter type="boolean" name="regex" default="false">
			Treat as a regular expression (`true`) or not (default, `false`).
		</parameter>
		<parameter type="boolean" name="smart" default="true">
			Perform smart search (default, `true`) or not (`false`). Note that to perform a "smart" search, DataTables uses regular expressions, so if you pass a regular expression in as the second parameter to this method, you will likely want to disable smart searching so the two different regular expressions don't conflict.
		</parameter>
		<parameter type="boolean" name="caseInsen" default="true">
			Do case-insensitive matching (default, `true`) or not (`false`).
		</parameter>
		<returns type="DataTables.Api">DataTables API instance</returns>
	</type>

	<description>
		While `-api search()` provides the ability to search globally across the table, this method, and its plural counterpart, provide the ability to search for data on a specific column.

		DataTables does not have any column search controls built-in as there are so many different ways that column specific data could be searched, but this method makes adding custom column search controls super easy. The examples below show how it may be used.

		Note that this search ability in DataTables is actually technically a filter since it is subtractive. However, we term it a search to avoid a naming overlap with the `-api filter()` helper method.

		**Please be aware that this method sets the search to apply to the table only - it does not actually perform the search**. In order to have the search performed and the result shown, use the `dt-api draw()` method, which can be called simply as a chained method of the `dt-api column().search()` method's returned object - for example `table.column( 0 ).search( 'Fred' ).draw();`. This is to provide the ability to queue multiple changes before performing a draw.
	</description>

	<example title="Individual column search"><![CDATA[
var table = new DataTable('#myTable');

// #column3_search is a <input type="text"> element
$('#column3_search').on('keyup', function () {
	table
		.columns(3)
		.search(this.value)
		.draw();
});
]]></example>

	<example title="Build a search for each column with a `select-filter` class."><![CDATA[
var table = new DataTable('#myTable');

table.columns('.select-filter').every(function () {
	var that = this;

	// Create the select list and search operation
	var select = $('<select />')
		.appendTo(this.footer())
		.on('change', function () {
			that.search($(this).val(), { exact: true }).draw();
		});

	// Get the search data for the first column and add to the select list
	this.cache('search')
		.sort()
		.unique()
		.each(function (d) {
			select.append($('<option value="' + d + '">' + d + '</option>'));
		});
});
]]></example>

	<example title="Individual column search with a function"><![CDATA[
let table = new DataTable('#example');

// Find any row with data in column index 3 greater than 50
table
	.column(3)
	.search((d) => d > 50)
	.draw();
]]></example>

	<related type="option">searching</related>
	<related type="option">columns.searchable</related>
	<related type="api">search()</related>
	<related type="api">columns().search()</related>
	<related type="api">DataTable.util.escapeRegex()</related>
</dt-api>
