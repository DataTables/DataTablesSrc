<?xml version="1.0" encoding="UTF-8" ?>
<dt-api group="rows">
	<name>rows().data()</name>
	<summary>Get the data for the selected rows.</summary>
	<since>1.10</since>

	<type type="function">
		<signature>rows().data()</signature>
		<description>Get the data for the rows from the selector</description>
		<returns type="DataTables.Api">DataTables API instance with data for each row from the selector in the result set. Each entry is the original data source object for that row, be it an array, object or JavaScript object instance.</returns>
	</type>

	<description>
		This method is used to get the data used for the cells in the rows matched by the selector from DataTables.

		The order of the data in the returned array and which rows the data is obtained from (searched rows, visible rows etc) is controlled by the `dt-type selector-modifier` option of the `dt-api rows()` selector used to get the selected rows.

		This method cannot be used to modify data in the table, only to retrieve it. Use the `dt-api row().data()` method instead which can be used as a setter.
	</description>

	<example title="Get all data from the table"><![CDATA[
var table = new DataTable('#myTable');

var data = table.rows().data();

alert('The table has ' + data.length + ' records');
]]></example>

	<example title="Using a data object instances as the data source"><![CDATA[
var pupils = [new Pupil(), new Pupil(), new Pupil(), new Pupil()];

// Create table with data set
var table = new DataTable('#myTable', {
	data: pupils
});

var rows = table.rows(0).data();

alert('Pupil name in the first row is: ' + rows[0].name());
]]></example>

	<related type="api">row().data()</related>
</dt-api>
