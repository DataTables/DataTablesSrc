<?xml version="1.0" encoding="UTF-8" ?>
<dt-api group="columns">
	<name>columns().render()</name>
	<summary>Get rendered data for a collection of columns</summary>
	<since>2.0.0</since>

	<type type="function">
		<signature>columns().render( type )</signature>
		<description>Get rendered data for the selected columns</description>
		<parameter type="string" name="type">
			Data type to get. This can be one of:

			* `-string display`
			* `-string filter`
			* `-string sort`
			* `-string type`
		</parameter>
		<returns type="DataTables.Api">DataTables API instance with the data for each selected column in the result set</returns>
	</type>

	<description>
		This method provides access to the [orthogonal data](/manual/orthogonal-data) that DataTables uses for each cell (in this case in the form of columns). This allows the same data to be used in different ways. A typical example of this is date / time data being used in numeric format (i.e. a timestamp) for sorting, but a complex formatted form for display.

		The `dt-api cells().data()` method provides access to the underlying raw data, while this method provides access to the rendered data for each type. It is provided to allow plug-in authors access to the orthogonal data available in the table.

		Note that calling this method will evaluate the renderer for the cell, rather than reading the information from cache (see `dt-api cells().cache()` to read from cache and `dt-api cells().invalidate()` to clear cache).
	</description>

	<example title="Get the display information for a column"><![CDATA[
var table = new DataTable('#myTable');
var rendered = table.columns( 1 ).render();

console.log( rendered );

]]></example>

	<related type="option">columns.data</related>
	<related type="option">columns.render</related>
	<related type="api">cells().data()</related>
	<related type="api">cell().data()</related>
	<related type="api">cell().render()</related>
	<related type="api">cell().invalidate()</related>
	<related type="api">column().render()</related>
	<related type="api">columns().render()</related>
</dt-api>
