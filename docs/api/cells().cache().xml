<?xml version="1.0" encoding="UTF-8" ?>
<dt-api group="cells">
	<name>cells().cache()</name>
	<summary>Get the DataTables cached data for the selected cells</summary>
	<since>1.10</since>

	<deprecated since="2.0">
		<description>
			Use `-api cells().render()` to get the data for a specific rendering type, rather than accessing DataTables' cache. This method will be removed in DataTables 3.
		</description>
	</deprecated>

	<type type="function">
		<signature>cells().cache( [ type ] )</signature>
		<description>Get cached data of the cache type specified</description>
		<parameter type="string" name="type" default="order">
			Specify which cache the data should be read from. Can take one of two values: `dt-string search` or `dt-string order`. Defaults to `order` if no value is given.
		</parameter>
		<returns type="DataTables.Api">DataTables API instance containing the cached data for the selected cells.</returns>
	</type>

	<description>
		DataTables caches data for searching and ordering in order for those operations to run as quickly as possible when they are required. Sometimes it can be useful to get the data that DataTables has cached for these operations, for example when creating a `select` list to provide a column based filter.

		Cached data is not guaranteed to be available at any particular moment. If DataTables hasn't requested the data, it won't have been cached. This is particularly obvious when using the `-string order` option and a sort hasn't been performed on a column. Invalidation of data will also cause the cache to be removed.
	</description>

	<related type="api">cells().render()</related>
	<related type="api">cells().invalidate()</related>
	<related type="api">cell().cache()</related>
	<related type="api">cell().render()</related>
	<related type="api">cell().invalidate()</related>
</dt-api>
