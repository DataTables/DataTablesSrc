<?xml version="1.0" encoding="UTF-8" ?>
<dt-event>
	<name>draw</name>
	<summary>Draw event - fired once the table has completed a draw.</summary>
	<since>1.10</since>

	<type type="function">
		<signature>function( e, settings )</signature>
		<parameter type="object" name="e">
			jQuery event object
		</parameter>
		<parameter type="DataTables.Settings" name="settings">
			DataTables settings object
		</parameter>
		<scope>HTML table element</scope>
		<bubbles>Yes</bubbles>
	</type>

	<description>
		It can be useful to take an action on every draw event of the table - for example you might want to update an external control with the newly displayed data, or when server-side processing enabled you might want to assign events to the newly created elements. This event is available to give exactly this information.

		The `dt-event draw` event is fired whenever the table is redrawn on the page, at the same point as `dt-init drawCallback` (technically the callback fires before the event, but they occur sequentially and thus either can be used to achieve the same effect).

		Please note that, as with all DataTables emitted events, the event object has a DataTables API instance available on it (the first parameter). Additionally, the events are triggered with the `dt` namespace. As such, to listen for this event using jQuery directly, you must also use the `dt` namespace by simply appending `.dt` to your event name. The DataTables `-api on()` method does this automatically.

		This event will bubble up the document, so you can add a listener for `draw.dt` to the `-tag body` to capture all draw events triggered by DataTables.
	</description>

	<example title="Log to console on each draw"><![CDATA[
var table = new DataTable('#myTable');

table.on( 'draw', function () {
	console.log( 'Redraw occurred at: '+new Date().getTime() );
} );
]]></example>

	<related type="option">drawCallback</related>
	<related type="api">draw()</related>
</dt-event>