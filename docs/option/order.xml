<?xml version="1.0" encoding="UTF-8" ?>
<dt-option group="option">
	<name>order</name>
	<summary>Initial order (sort) to apply to the table</summary>
	<since>1.10</since>

	<type type="DataTables.Order" />
	<default value="[[0, 'asc']]" />

	<description>
		If ordering is enabled (`dt-init ordering`), then DataTables will perform a first pass order during initialisation. Using this parameter you can define which column(s) the order is performed upon, and the ordering direction. The `dt-init order` can be defined in a number of different ways as defined by `-type DataTables.Order`.
	</description>

	<example title="No ordering applied by DataTables during initialisation. The rows are shown in the order they are read by DataTables (i.e. the original order from the DOM if DOM sourced, or the array of data if Ajax / data sourced)"><![CDATA[
new DataTable('#myTable', {
	order: []
});
]]></example>


	<example title="Multi-column ordering as the initial state (using tuples)"><![CDATA[
new DataTable('#myTable', {
	order: [[ 0, 'asc' ], [ 1, 'asc' ]]
} );
]]></example>

	<example title="Single-column ordering as the initial state (using objects)"><![CDATA[
new DataTable('#myTable', {
	order: {
		idx: 1,
		dir: 'asc'
	}
} );
]]></example>

	<example title="Single-column ordering as the initial state (using objects and column names)"><![CDATA[
new DataTable('#myTable', {
	columns: [
		{ name: 'first_name' },
		{ name: 'last_name' },
		{ name: 'position' },
		{ name: 'city' }
	],
	order: {
		name: 'city',
		dir: 'asc'
	}
} );
]]></example>

	<related type="option">ordering</related>
	<related type="option">orderFixed</related>
	<related type="option">columns.orderable</related>
	<related type="option">columns.orderData</related>
	<related type="option">columns.orderSequence</related>
	<related type="api">order()</related>
</dt-option>