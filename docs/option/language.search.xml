<?xml version="1.0" encoding="UTF-8" ?>
<dt-option group="i18n">
	<name>language.search</name>
	<summary>Search input string</summary>
	<since>1.10</since>

	<type type="string" />
	<default value="Search:" />

	<description>
		Sets the string that is used for DataTables filtering input control. It is overridable by the `-feature search.text` string for a specific search input control.

		The token `string _INPUT_`, if used in the string, is replaced with the HTML text box for the filtering input allowing control over where it appears in the string. If `string _INPUT_` is not given then the input box is appended to the string automatically.

		As of DataTables 2 the DOM structure that is generated can change based on the location of the `_INPUT_` token in the string. If the token is at the start or the end of the string, the generated DOM will have the `-tag input` outside of the `-tag label`. This is done for accessability to allow an _explicit_ link between the `-tag input` and `-tag label` (see [this article for more details](https://css-tricks.com/html-inputs-and-labels-a-love-story/#aa-how-to-pair-a-label-and-an-input)).

		If the token is in the middle of the string, the DOM structure created will have the `-tag input` nested in the `-tag label`, creating an _implicit_ link (although the `for` and `id` attributes are still set). Some screenreaders can struggle with this form and it is not recommended.

		This DOM structure distinction is only of significance if you are applying custom styling to the page. You _may_ need to alter your CSS depending on the string used.

		Additionally, this property can benefit from the use of `-init language.entries` to easily update the string to relate to the specific type of data shown in the table. It's plural will always resolve to the plural wildcard. The `_ENTRIES_` replacement token should be used where you want the resolved `-init language.entries` value to appear.
	</description>

	<example title="Input text box will be appended at the end automatically"><![CDATA[
new DataTable('#myTable', {
  "language": {
    "search": "Filter records:"
  }
} );
]]></example>

	<example title="Custom text using `language.entries`"><![CDATA[
new DataTable('#myTable', {
  "language": {
    "search": "Filter _ENTRIES_:"
  }
} );
]]></example>

	<example title="Specify where the filter should appear"><![CDATA[
new DataTable('#myTable', {
  "language": {
    "search": "Apply filter _INPUT_ to table"
  }
} );
]]></example>

	<related type="option">language</related>
	<related type="option">searching</related>
	<related type="option">language.searchPlaceholder</related>
	<related type="option">language.entries</related>
	<related type="api">search()</related>
</dt-option>