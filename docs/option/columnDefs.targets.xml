<?xml version="1.0" encoding="UTF-8" ?>
<dt-option group="columns">
	<name>columnDefs.targets</name>
	<summary>Assign a column definition to one or more columns.</summary>
	<since>1.10</since>

	<type type="array|string|integer" />

	<description>
		The `dt-init columnDefs` option allows a column definition object to be defined and then assigned to one or more columns in a DataTable, regardless of the order of the column definitions array, or the order of the columns in the table.

		This `dt-init columnDefs.targets` option provides the information required by DataTables for which columns in the table the column definition object should be applied.

		It can be:

		* 0 or a positive integer - column index counting from the left
		* A negative integer - column index counting from the right
		* A CSS selector - columns that match the selector will be used (since 2.0)
		* The string `-string _all` - all columns (i.e. assign a default)
		* A string with just letters, numbers underscore and dash (`/^[a-z][\w-]*$/i` as regex) - a class name match. Please note that this option is provided for backwards compatibility with DataTables 1.x. It does mean you can't just use element names as a selector, but that would be limited to `-tag th` and `-tag td` in the header anyway.

		Additionally, `targets` can be either a single option from the list above, or an array of options (the different types can be mixed in the array if required). For example `targets: [ -1, -2 ]` would target the last and second last columns in the table.

		Please note that unlike all other column configuration options which can be applied to be `dt-init columns` and `dt-init columnDefs`, the `dt-init columnDefs.targets` option can only be used in `dt-init columnDefs`.
	</description>

	<example title="Disable filtering on the first column"><![CDATA[
$('#example').dataTable( {
  "columnDefs": [ {
      "targets": 0,
      "searchable": false
    } ]
} );
]]></example>

	<example title="Disable sorting on the first and third columns"><![CDATA[
$('#example').dataTable( {
  "columnDefs": [ {
      "targets": [ 0, 2 ],
      "orderable": false
    } ]
} );
]]></example>

	<example title="Disable ordering on columns which have a class of 'nosort'"><![CDATA[
$('#example').dataTable( {
  "columnDefs": [ {
      "targets": 'nosort',
      "orderable": false
    } ]
} );
]]></example>

	<related type="option">columnDefs</related>
	<related type="api">column()</related>
	<related type="api">columns()</related>
</dt-option>