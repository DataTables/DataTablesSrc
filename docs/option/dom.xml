<?xml version="1.0" encoding="UTF-8" ?>
<dt-option group="option">
	<name>dom</name>
	<summary>Define the table control elements to appear on the page and in what order</summary>
	<since>1.10</since>

	<type type="string" />
	<default value="null"><![CDATA[
    The default value was `lfrtip` in DataTables 1.x. Styling integrations would set a custom value. As of DataTables 2, with this `-init layout` option replacing this one, its default value is `null`.
]]></default>

  <deprecated since="2.0" removal="3.0">
    <description>
      This option is superseded by the `-init layout` option in DataTables 2, which is far more flexible, intuitive and styling framework independent. **Do not use this option** for new projects, and actively update older projects to use `-init layout` rather than this option.
    </description>
  </deprecated>

	<description>
    <![CDATA[
    DataTables will add a number of elements around the table to both control the table and show additional information about it. The position of these elements on screen are controlled by a combination of their order in the document (DOM) and the CSS applied to the elements. This parameter is used to control their ordering and additional mark-up surrounding them in the DOM.

    Each table control element in DataTables has a single letter associated with it, and that letter it used in this `dt-init dom` configuration option to indicate where that element will appear in the document order.

    ### Options

    The built-in table control elements in DataTables are:

    * `l` - `l`ength changing input control
    * `f` - `f`iltering input
    * `t` - The `t`able!
    * `i` - Table `i`nformation summary
    * `p` - `p`agination control
    * `r` - p`r`ocessing display element

    Each option can be specified multiple times (with the exception of the table itself), which can be used to have table controls both above and below the table. DataTables will automatically synchronise these multiple controls.

    ### Markup

    Further to these options, you can also specify additional `tag div` elements to be inserted into the document, which can be used for styling / nesting of the control elements. To add tags, the following syntax is expected:

    * `<` and `>` - div element
    * `<"class"` and `>` - div with a class
    * `<"#id"` and `>` - div with an ID
    * `<"#id.class"` and `>` - div with an ID _and_ a class

    ### Styling

    The styling libraries that DataTables supports will override the default value of the `dt-init dom` parameter and replace it with a value that is suitable for their layout system. For example the Bootstrap integration makes use of Bootstrap's grid layout.

    ### Plug-ins

    DataTables feature plug-ins can be developed to add additional features to DataTables and often will make use of this option, adding new letters to the DataTables core features. For example [Buttons](//datatables.net/extensions/buttons) adds the `B` option to `dt-init dom` to specify where table control buttons should be inserted into the table.

    The following [extensions](/extensions) can be initialised through the `-init dom` option:

    * `B` - [Buttons](/extensions/buttons)
    * `R` - [ColReorder](/extensions/colreorder)
    * `S` - [Scroller](/extensions/scroller)
    * `P` - [SearchPanes](/extensions/searchpanes)
    * `Q` - [SearchBuilder](/extensions/searchbuilder)

    ]]>
  </description>

	<example title="No filtering input control"><![CDATA[
/* Results in:
    {length}
    {processing}
    {table}
    {information}
    {pagination}
*/
new DataTable('#myTable', {
	dom: 'lrtip'
});

// As of DataTables 2, use `layout`:

new DataTable('#myTable', {
  layout: {
    topEnd: null
  }
});
]]></example>

	<example title="Simpler wrapper element"><![CDATA[
/* Results in:
    <div class="wrapper">
      {filter}
      {length}
      {information}
      {pagination}
      {table}
    </div>
*/
new DataTable('#myTable', {
	dom: '<"wrapper"flipt>'
});
]]></example>

	<example title="Length and filter above, information and pagination below table"><![CDATA[
/* Results in:
    <div>
      {length}
      {filter}
      <div>
        {table}
      </div>
      {information}
      {pagination}
    </div>
*/
new DataTable('#myTable', {
	dom: '<lf<t>ip>'
});
]]></example>

	<example title="Table summary in header, filtering, length and processing in footer, with a clearing element."><![CDATA[
/* Results in:
    <div class="top">
      {information}
    </div>
    {processing}
    {table}
    <div class="bottom">
      {filter}
      {length}
      {pagination}
    </div>
    <div class="clear"></div>
*/
new DataTable('#myTable', {
	dom: '<"top"i>rt<"bottom"flp><"clear">'
});
]]></example>

	<related type="option">searching</related>
	<related type="option">info</related>
	<related type="option">ordering</related>
	<related type="option">processing</related>
  <related type="option">paging</related>
  <related type="option">lengthChange</related>
</dt-option>
