<?xml version="1.0" encoding="UTF-8" ?>
<dt-option group="columns">
	<name>columns.orderSequence</name>
	<summary>Order direction application sequence</summary>
	<since>1.10</since>

	<type type="array" />
	<default value="[ 'asc', 'desc', '' ]" />

	<description>
		You can control the default ordering direction, and even alter the behaviour of the order handler (i.e. only allow ascending sorting, reverse the default sequence, etc) using this parameter.

		Values that can be given in this array are:

		* `-string asc` - Ascending order
		* `-string desc` - Descending order
		* `-string ` (i.e. empty string) - data index order. Note that this option is available as of DataTables 2.0 and newer.

		Prior to DataTables 2 this option defaulted to `[ 'asc', 'desc' ]`. DataTables 2 added the third option to the array with the empty string included in the default for the no sort state. If you would like to use the DataTables 1.x behaviour, set the default using:

		```js
		DataTable.defaults.column.orderSequence = ['asc', 'desc'];
		```
	</description>

	<example title="Using `orderSequence` to define the applied order sequence with `dt-init columnDefs`"><![CDATA[
new DataTable('#myTable', {
	columnDefs: [
		{ orderSequence: ['asc'], targets: [1] },
		{ orderSequence: ['desc', 'asc', 'asc'], targets: [2] },
		{ orderSequence: ['desc'], targets: [3] }
	]
});
]]></example>

	<example title="Using `orderSequence` to define the applied order sequence with `dt-init columns`"><![CDATA[
new DataTable('#myTable', {
	columns: [
		null,
		{ orderSequence: ['asc'] },
		{ orderSequence: ['desc', 'asc', ''] },
		{ orderSequence: ['desc'] },
		null
	]
});
]]></example>

	<related type="option">ordering</related>
	<related type="option">order</related>
	<related type="api">order()</related>
	<related type="api">column().order()</related>
	<related type="api">columns().order()</related>
</dt-option>